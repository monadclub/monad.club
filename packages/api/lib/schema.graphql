
enum RemoteOptions {
  REMOTE_ONLY
  FLEXIBLE
  ON_PREMISE
}

# Table
enum EmploymentTypes {
  CONTRACT
  PERMENANT
  BOTH
}

type Image {
  # ...
  id: ID!
  secureUrl: String!
}

type JobSpec {
  id: ID!
  company: Company!
  title: String!
  roleType: ID!
  remoteOption: RemoteOptions!
  jobDescription: String!
  employmentTypeId: ID!
  contractLength: Int 
  salaryLow: Float
  salaryHigh: Float
  dayRateLow: Float
  dayRateHigh: Float
  skills: [Skill]!
  roleId: ID!
  levelId: ID!
  isPublished: Boolean!
}

type Candidate {
  id: ID!
  firstName: String!
  lastName: String!
  bio: String
  availibility: String!
  # dateOfBirth: Date!
  remoteOption: RemoteOptions!
  employmentType: EmploymentTypes!
  salaryExpectation: Float 
  dayRateExpectation: Float
  githubId: String 
  avatar: Image
  skills: [CandidateSkill]!
  blockedCompanies: [Company]
  experiences: [Experience]
  sideProjects: [SideProject]
  contentLinks: [ContentLink]
}

type CandidateSkill {
  skill: Skill!
  yearsOfExperience: Float!
}

type Company {
  jobSpecs: [JobSpec]
}

input PaginationInput {
  limit: Int 
  offset: Int
}

type Experience {
  id: ID!
}

type SideProject {
  id: ID!
}

type ContentLink {
  id: ID!
}

type Skill {
  id: ID!
}

type Role {
  id: ID!
}

type Level {
  id: ID!
}

type CompanyUser {
  id: ID!
}

type Chat {
  id: ID!
}

type Message {
  id: ID!
}

input JobSpecInput {
  title: String
}

type Query {
  jobSpecs(pagination: PaginationInput): [JobSpec]
}

type Mutation {
  createJobSpec(jobSpec: JobSpecInput): JobSpec
}