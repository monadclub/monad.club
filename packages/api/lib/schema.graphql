

type PaginatedSideProjects {
  pageInfo: PageInfo!
  edges: [SideProject]!
}

type PaginatedExperiences {
  pageInfo: PageInfo!
  edges: [Experience]!
}

type PaginatedContentLinks {
  pageInfo: PageInfo!
  edges: [ContentLink]!
}

type PaginatedCompanies {
  pageInfo: PageInfo!
  edges: [Company]!
}

type PaginatedSkills {
  pageInfo: PageInfo!
  edges: [Company]!
}

type PaginatedJobSpecs {
  pageInfo: PageInfo!
  edges: [Company]!
}

input PaginationInput {
  limit: Int
  offset: Int
}

type CloudinaryImage {
  id: ID!
  format: String!
  height: Float!
  width: Float!
  publicId: String!
  version: Int!
  secureUrl: String!
}

type JobSpec {
  id: ID!
  company: Company!
  title: String!
  roleType: ID!
  remoteOption: RemoteOptions!
  jobDescription: String!
  employmentTypeId: ID!
  contractLength: Int 
  salaryLow: Float
  salaryHigh: Float
  dayRateLow: Float
  dayRateHigh: Float
  skills: [Skill]!
  roleId: ID!
  levelId: ID!
  isPublished: Boolean!
}

type CandidateSkill {
  skill: Skill!
  yearsOfExperience: Float!
}

type Candidate {
  id: ID!
  firstName: String!
  lastName: String!
  bio: String
  availibility: String!
  dateOfBirth: Date!
  remoteOption: RemoteOptions!
  employmentType: EmploymentTypes!
  salaryExpectation: Float 
  dayRateExpectation: Float
  githubId: String
  avatarImage: CloudinaryImage
  # avatar(transform: CloudinaryTransform): String TODO: Returns a cloudinary string based on transformation
  skills(page: PaginationInput!): PaginatedSkills
  blockedCompanies(page: PaginationInput!): PaginatedCompanies
  experiences(page: PaginationInput!): PaginatedExperiences
  sideProjects(page: PaginationInput!): PaginatedSideProjects
  contentLinks(page: PaginationInput!): PaginatedContentLinks
}

type Company {
  id: ID!
  name: String!
  jobSpecs(page: PaginationInput!): PaginatedJobSpecs
}

type Experience {
  id: ID!
}

type SideProject {
  id: ID!
  title: String!
  url: String!
  startDate: Date!
  endDate: Date
  description: String!
}

type ContentLink {
  id: ID!
  name: String!
  icon: String!
  url: String!
}

type Skill {
  id: ID!
  name: String!
}

type Role {
  id: ID!
}

type Level {
  id: ID!
}

type CompanyUser {
  id: ID!
}

type Chat {
  id: ID!
}

type Message {
  id: ID!
}

input JobSpecInput {
  title: String
}

type Query {
  jobSpecs(pagination: PaginationInput): [JobSpec]
}

type Mutation {
  createJobSpec(jobSpec: JobSpecInput): JobSpec
}